name: Deploy to EC2 (build on server)

on:
  push:
    branches: [ "main" ]   # 배포 브랜치 지정

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (선택: 굳이 필요 없음)
        uses: actions/checkout@v4

      # SSH로 원격 명령 실행
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}      # 예: ec2-xx-xx-xx-xx.ap-northeast-2.compute.amazonaws.com
          username: ${{ secrets.EC2_USER }}  # Ubuntu AMI면 ubuntu, Amazon Linux면 ec2-user
          key: ${{ secrets.EC2_KEY }}        # PEM 내용 그대로 (줄바꿈 포함)
          port: 22
          script: |
            set -e
            APP_DIR=/var/www/smartfarming-ai
            REPO=https://github.com/samkeun/smartfarming-ai.git

            # 초기 준비(최초 1회만 실행될 가능성)
            if [ ! -d "$APP_DIR/.git" ]; then
              sudo mkdir -p "$APP_DIR" && sudo chown -R $USER:$USER "$APP_DIR"
              git clone "$REPO" "$APP_DIR"
            fi

            cd "$APP_DIR"

            # 항상 원격 기준으로 동기화 (분기/충돌 방지)
            git fetch --prune origin
            git reset --hard origin/main
            git clean -df

            # Node/Yarn/PM2가 없다면 사전 설치(최초 1회)
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            if ! command -v yarn >/dev/null 2>&1; then
              corepack enable || true
              corepack prepare yarn@stable --activate || true
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm i -g pm2
            fi

            # 환경변수(.env.production)가 서버에 필요한 경우: 여기서 생성/갱신
            # echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" > .env.production

            yarn install --frozen-lockfile
            yarn build

            # PM2로 재시작(없으면 생성)
            if [ ! -f ecosystem.config.js ]; then
              cat > ecosystem.config.js <<'EOF'
              module.exports = {
                apps: [{
                  name: "next-app",
                  script: ".next/standalone/server.js",
                  env: { NODE_ENV: "production", PORT: 3000 }
                }]
              }
              EOF
            fi

            pm2 startOrReload ecosystem.config.js --update-env
            pm2 save
